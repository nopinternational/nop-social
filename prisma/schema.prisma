// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Conversation {
  id                  String                    @id @default(cuid())
  createdAt           DateTime                  @default(now())
  updatedAt           DateTime                  @updatedAt
  participants        ConversationParticipant[]
  messages            Message[]
  PrivateConversation PrivateConversation[]
  Circle              Circle[]
}

model PrivateConversation {
  id             String        @id @default(cuid())
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  conversation   Conversation? @relation(fields: [conversationId], references: [id])
  conversationId String?
  initiatorId    String
  recipientId    String
  message        String?
  acceptedAt     DateTime?
  rejectedAt     DateTime?
  deletedAt      DateTime?
}

model Circle {
  id             String        @id @default(cuid())
  name           String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  conversation   Conversation? @relation(fields: [conversationId], references: [id])
  conversationId String?
  initiatorId    String
  recipientId    String
  description    String?
  type           String
}

model ConversationParticipant {
  id                String       @id @default(cuid())
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  conversation      Conversation @relation(fields: [conversationId], references: [id])
  conversationId    String
  userId            String
  invitedBy         String?
  invitationMessage String?
  acceptedAt        DateTime?
  deletedAt         DateTime?
}

model Message {
  id             String       @id @default(cuid())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  content        String
  conversationId String
  userId         String
}

model Profile {
  id              String   @id @default(cuid())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  userId          String   @unique
  name            String   @unique
  type            String
  county          String?
  city            String?
  aboutUs         String?
  weAreLookingFor String?
  Male            Male[]
  Female          Female[]
}

model Male {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  profileId   String
  Profile     Profile  @relation(fields: [profileId], references: [id])
  dateOfBirth DateTime
  sexuality   String
  length      String
  bodyType    String
  dickSize    String
  tags        String
}

model Female {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  profileId   String
  Profile     Profile  @relation(fields: [profileId], references: [id])
  dateOfBirth DateTime
  sexuality   String
  length      String
  bodyType    String
  breasts     String
  tags        String
}
