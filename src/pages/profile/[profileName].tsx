import { type NextPage } from "next";
import Head from "next/head";
import { signIn, signOut, useSession } from "next-auth/react";

import { api } from "~/utils/api";
import { useRouter } from "next/router";
import type { PrivateConversation, Profile } from "@prisma/client";
import { Session } from "next-auth";
import Link from "next/link";

function ProfileView({ profileName }: { profileName: string }) {
  const { data: sessionData } = useSession();
  const utils = api.useContext();
  const profileQuery = api.profile.getProfileByName.useQuery({ profileName });
  
  const inviteToConversationMutation = api.privateConversation.inviteToPrivateConversation.useMutation({
    onSuccess() {
      void utils.profile.getProfileByName.invalidate();
    }
  });

  const acceptConversationMutation = api.privateConversation.acceptPrivateConversation.useMutation({
    onSuccess() {
      void utils.profile.getProfileByName.invalidate();
    }
  });


  if (profileQuery.isLoading) return <div>loading...</div>;
  if (!profileQuery.data?.profile) return <div>No profile found</div>;

  return (
    <>
      <Head>
        <title>NoP Chat</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]">
        <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16">
          <h1 className="text-xl tracking-tight text-white ">
            Welcome to profile: {profileName}
          </h1>
          <ProfileAboutCard
            profile={profileQuery.data.profile}
            sessionData={sessionData}
            privateConversation={profileQuery.data.privateConversation}
            onInviteClick={() => {              
                inviteToConversationMutation.mutate({recipientId: profileQuery.data?.profile.userId || "ERROR"})
            }}
            onAcceptClick={() => {
              acceptConversationMutation.mutate({ privateConversaionId: profileQuery.data?.privateConversation?.id || "ERROR" })
            }}
          />

          <div className="flex flex-col items-center gap-2">
            <AuthShowcase />
          </div>
        </div>
      </main>
    </>
  );
}

const ProfilePage: NextPage = () => {
  const router = useRouter();

  const { profileName } = router.query;
  if (!profileName) return <div>loading...</div>;

  return <ProfileView profileName={profileName as string} />;
};

export default ProfilePage;

const AuthShowcase: React.FC = () => {
  const { data: sessionData } = useSession();

  const { data: secretMessage } = api.example.getSecretMessage.useQuery(
    undefined, // no input
    { enabled: sessionData?.user !== undefined }
  );

  return (
    <div className="flex flex-col items-center justify-center gap-4">
      <p className="text-center text-2xl text-white">
        {sessionData && <span>Logged in as {sessionData.user?.name}</span>}
        {secretMessage && <span> - {secretMessage}</span>}
      </p>
      <button
        className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
        onClick={sessionData ? () => void signOut() : () => void signIn()}
      >
        {sessionData ? "Sign out" : "Sign in"}
      </button>
    </div>
  );
};

function ProfileAboutCard({
  profile,
  sessionData,
  onInviteClick,
  onAcceptClick,
  privateConversation
}: {
  profile: Profile;
  sessionData: Session | null;
  onInviteClick?: () => void;
  onAcceptClick?: () => void;
  privateConversation: PrivateConversation | undefined
}) {
  return (
    <div className="rounded-sm bg-white p-3 shadow-sm">
      <div className="flex items-center space-x-2 font-semibold leading-8 text-gray-900">
        <span className="text-green-500">
          <svg
            className="h-5"
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"
            />
          </svg>
        </span>
        <span className="tracking-wide">About</span>
      </div>
      <div className="text-gray-700">
        <div className="grid text-sm md:grid-cols-2">
          <div className="grid grid-cols-2">
            <div className="px-4 py-2 font-semibold">Name</div>
            <div className="px-4 py-2">{profile.name}</div>
          </div>
          <div className="grid grid-cols-2">
            <div className="px-4 py-2 font-semibold">About Us</div>
            <div className="px-4 py-2">{profile.name}</div>
          </div>
          <div className="grid grid-cols-2">
            <div className="px-4 py-2 font-semibold">We are looking for</div>
            <div className="px-4 py-2">{profile.weAreLookingFor}</div>
          </div>
          <div className="grid grid-cols-2">
            <div className="px-4 py-2 font-semibold">LÃ¤n</div>
            <div className="px-4 py-2">{profile.county}</div>
          </div>
          <div className="grid grid-cols-2">
            <div className="px-4 py-2 font-semibold">City</div>
            <div className="px-4 py-2">{profile.city}</div>
          </div>
          <div className="grid grid-cols-2">
            <div className="px-4 py-2 font-semibold">Something</div>
            <div className="px-4 py-2">---</div>
          </div>
          <div className="grid grid-cols-2">
            <div className="px-4 py-2 font-semibold">Something</div>
            <div className="px-4 py-2">---</div>
          </div>
          <div className="grid grid-cols-2">
            <div className="px-4 py-2 font-semibold">Something</div>
            <div className="px-4 py-2">---</div>
          </div>
        </div>
      </div>
      {privateConversation?.rejectedAt && <div>You are blocked.</div>}
      {privateConversation?.acceptedAt && <Link href={`/conversation/${privateConversation.conversationId || 'error'}`}>Chat</Link>}
      {privateConversation && !privateConversation?.acceptedAt && !privateConversation?.rejectedAt && <div>Invitation sent</div> }
      {sessionData?.user?.name !== profile.userId && !privateConversation && (
        <div>
          <button
            onClick={(e) => {e.preventDefault(), onInviteClick && onInviteClick()}}
            className="rounded-md bg-indigo-600 px-3.5 py-2.5 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600"
          >
            Invite to conversation
          </button>
        </div>
      )}
       {sessionData?.user?.name !== profile.userId && privateConversation 
       && privateConversation.recipientId === sessionData?.user?.name
       && !privateConversation.acceptedAt && !privateConversation.rejectedAt && (
        <div>
          <button
            onClick={(e) => {e.preventDefault(), onAcceptClick && onAcceptClick()}}
            className="rounded-md bg-indigo-600 px-3.5 py-2.5 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600"
          >
            Accept conversation
          </button>
        </div>
      )}
    </div>
  );
}
